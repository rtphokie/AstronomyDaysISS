# -*- coding: utf-8 -*-
"""ISS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BVxhugAbx3J9ZZYsVpuDxFoPjtdHehz1
"""

!pip install skyfield
from skyfield.api import load, wgs84
import pytz
import pylab as pl
import matplotlib.pyplot as plt
ts = load.timescale()
eastern = pytz.timezone('US/Eastern')
raleigh = wgs84.latlon(+35.78, -78.64, elevation_m=100)

"""[space station orbital elements (NORAD)](http://celestrak.com/NORAD/elements/stations.txt)

"""

stations_url = 'http://celestrak.com/NORAD/elements/stations.txt'
satellites = load.tle_file(stations_url)
print('Loaded', len(satellites), 'satellites')

by_name = {sat.name: sat for sat in satellites}
satellite = by_name['ISS (ZARYA)']
print(satellite)
print(satellite.epoch.utc_jpl())
print(satellite)

"""Where is the ISS? [NASA Spot the Station](https://spotthestation.nasa.gov/tracking_map.cfm)"""

t = ts.now()
geocentric = satellite.at(t)
subpoint = wgs84.subpoint(geocentric)
print(f'Latitude:  {subpoint.latitude.degrees:.2f}')
print(f'Longitude: {subpoint.longitude.degrees:.2f}')
print(f"Elevation {int(subpoint.elevation.km)} (km) {int(subpoint.elevation.km*0.621371)} (mi)")
print(f"https://earth.google.com/web/search/{subpoint.latitude.degrees:.2f},{subpoint.longitude.degrees:.2f}")

difference = satellite - raleigh
topocentric = difference.at(t)
alt, az, distance = topocentric.altaz()
print(f"alt {alt}, az {az} distance {int(distance.km)} (km) {int(distance.km*0.621371):,} (mi)")

"""ISS Passes [Heavens Above](https://www.heavens-above.com/main.aspx?lat=35.78&lng=-78.64&loc=Raleigh,+NC&alt=200.00000000000003)"""

raleigh = wgs84.latlon(+35.78, -78.64, elevation_m=100)
t0 = ts.utc(2021, 1, 31)
t1 = ts.utc(2021, 2, 5)
t, events = satellite.find_events(raleigh, t0, t1, altitude_degrees=10.0)
for ti, event in zip(t, events):
    name = ('rise above 10°', 'culminate', 'set below 10°')[event]
    print(ti.utc_strftime('%Y %b %d %H:%M:%S'), name)

eph = load('de421.bsp')
sun, earth = eph['sun'], eph['earth']
horizon=10
def sun_pos(t, topopos):
  obs = earth + raleigh
  astrometric = obs.at(t).observe(sun)
  apparent = obs.at(t).observe(sun).apparent()
  alt, az, dist = apparent.altaz()
  return alt, az, dist

for ti, event in zip(t, events):
    name = (f'rise above {horizon}°', 'highest point', f'set below {horizon}°')[event]
    sunalt, sunaz, sundist = sun_pos(ti, raleigh)
    if -12 <= sunalt.degrees <= -6:
      print(ti.utc_jpl(), name)

horizon=10.0
t, events = satellite.find_events(raleigh, t0, t1, altitude_degrees=horizon)
for ti, event in zip(t, events):
    name = (f'rise above {horizon}°', 'highest point', f'set below {horizon}°')[event]
    sunalt, sunaz, sundist = sun_pos(ti, raleigh)
    if -12 <= sunalt.degrees <= -6:
      print(ti.astimezone(eastern).strftime('%a %b %d %-I:%M:%S %p'), name)
      if event ==2:
        print()
        # plot_sky(passes[1], self.timezoneobj, t, alt, az)